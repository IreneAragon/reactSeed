1 .- New empty proyect 

2.- INSTALL NODE JS Y NPM 
        npm install 
        npm init -y

3.- INSTALL WEBPACK AND WEBPACK CLI 
        npm install webpack webpack-cli --save-dev
    Config package.json, set inside "scripts"
        "start": "webpack --mode development"

4.- INSTALL BABEL 
        npm install @babel/cli @babel/core @babel/preset-env --save-dev
    INSTALL BABEL LOADERS
        npm install babel-loader --save-dev
    CONFIG BABEL
        1 - create file =>  .babelrc
        2 - content: 
            {
                "presets": ["@babel/preset-env"]
            }

5.- CONFIG WEBPACK
    Create index.js file for testing and put into some ES6 code 
        const myname = "Irene";
        const surname = "Arag√≥n";
        const user = `User: ${myname} ${surname}`;
        document.write(user);
    Create index.html for testing 
        <!DOCTYPE html>
            <html lang="en">
                <head>
                    <meta charset="utf-8" />
                    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    <title>Webpack by sample</title>
                </head>
                <body>
                    Hello Webpack!
                    <script src="./dist/main.js"></script>
                </body>
            </html>
    Create a src folder, keep your app files into and put the configuration files outside 
        Example: 
            > dist
            > node_modules
            > src   
                - index.html
                - index.js
                - styles.scss
            - .babelrc
            - package.json
            - webpack.config.js
            - ... 
    Create webpack.config.js file
        Add at the beginning of the file 
            const basePath = __dirname;
        Set entry point 
            module.exports = {
                context: path.join(basePath, 'src'),
                entry: ["./index.js"],
            };
        Set rules into module.exports
            module: {
                rules: [
                    {
                    test: /\.js$/,
                    exclude: /node_modules/,
                    loader: 'babel-loader',
                    },
                ],
            },
        Add an output
            output: {
                path: path.resolve(__dirname, "dist"),
            },

6.- INSTALL WEBPACK SERVER
        npm install webpack-dev-server --save-dev
    CONFIG package.json 
        "scripts": {
            -   "start": "webpack --mode development"
            +   "start": "webpack serve --mode development",
            +   "build": "webpack --mode development"
        },

7.- INSTALL HTML WEBPACK PLUGIN
        npm install html-webpack-plugin --save-dev
    CONFIG webpack.config.js
        Add at the beginning of the file
            const HtmlWebpackPlugin = require('html-webpack-plugin');
        Add inside module.exports, after module 
            + plugins: [
            +   new HtmlWebpackPlugin({
            +     filename: 'index.html', //Name of file in ./dist/
            +     template: 'index.html', //Name of template in ./src
            +     scriptLoading:'blocking',
            +    }),
            + ],

8.- INSTALL CSS LOADERS
        npm install style-loader css-loader --save-dev
    CONFIG webpack.config.js
        -  entry: ['./index.js'],
        + entry: ['../index.js', './mystyles.css'],
    ADD inside rules []
        +     {
        +       test: /\.css$/,
        +       exclude: /node_modules/,
        +       use: [
        +         {
        +           loader: 'style-loader',
        +         },
        +         {
        +           loader: 'css-loader',
        +         },
        +       ],
        +     },
    Add configuration to the entry point - module.exports
        +  entry: {
        +    app: './index.js',
        +    appStyles: [
        +      './mystyles.css',
        +    ],
        +  },
    ADD into output 
        + output: {
            ...
        +   filename: '[name].[chunkhash].js',
        + },
    
9.- INSTALL CLEAN WEBPACK PLUGIN to remove/clean the build folder.
        npm install clean-webpack-plugin --save-dev
    CONFIG webpack.config.json
        Add at the beginning of the file
            + const {CleanWebpackPlugin} = require('clean-webpack-plugin')
            + const path = require('path')
        Add inside output
            + path: path.resolve(process.cwd(), 'dist'),
        Add inside plugins
            + new CleanWebpackPlugin(),
        
10 .- INSTALL MiniCssExtractPlugin to keep separate the css files (optional)
        npm install mini-css-extract-plugin --save-dev
    CONFIG webpack.config.js
        Replace the "use" array of the css rules with MiniCssExtractPlugin config
            -        use: [
            -          {
            -            loader: 'style-loader',
            -          },
            -          {
            -            loader: 'css-loader',
            -          },
            -         ],
            +       use: [
            +          MiniCssExtractPlugin.loader,
            +         "css-loader"
            +        ]
        Add the plugin object into plugins
            +   new MiniCssExtractPlugin({
            +     filename: "[name].css",
            +     chunkFilename: "[id].css"
            +   }),    

11.- INSTALL SASS (optional)
    Create some sass elements into css files
    Change the .css extension to .scss     
    CONFIG webpack.config.js
        Change .css to .scss on appStyles
            appStyles: [
            -     './mystyles.css',
            +     './mystyles.scss',
    Intall sass loader
        npm install sass sass-loader --save-dev
    Add a new entry point for sass files into rules 
            +     {
            +       test: /\.scss$/,
            +       exclude: /node_modules/,
            +       use: [
            +         MiniCssExtractPlugin.loader,
            +         "css-loader",
            +         {
            +           loader: "sass-loader",
            +           options: {
            +             implementation: require("sass")
            +           }
            +         },
            +       ]
            +     },

12 .- INSTALL RIMRAF to delete and create automatically the dist folder when npm run build 
        Install the plugin 
            npm i rimraf --save-dev
        CONFIG package.json
            "build": "rimraf ./dist && webpack --mode development"

13 .- MANAGE IMAGES 
        Add into index.html an image container and an img src element 
            <div id="imgContainer"></div>
            <img src="./content/react-logo.jpg" />
        Create new 'content' folder into src and save two images
        Import the images from index.js
            Add at the beginning of the file 
                import logoImg from "./content/react2.png";
            Add the image with js 
                + const img = document.createElement('img');
                + img.src = logoImg;
                + document.getElementById('imgContainer').appendChild(img);
        INSTALL HTML loader so that the images continue to be seen when it goes into production
            npm install html-loader --save-dev
        CONFIG webpack.config.js
            Add new rules for the images and the html loader
                +     {
                +       test: /\.(png|jpg)$/,
                +       type: 'asset/resource',
                +     },

                +     {
                +      test: /\.html$/,
                +      loader: 'html-loader',
                +     },
        Add css styles if is necesary
            + img {
            +   display: block;
            +   width: 200px;
            + }

14 .- INSTALL REACT 
        npm install react react-dom --save
        Add a new container for react into index.html
            <div id="root"></div>
        Change the .js extensions to .jsx 
        Import React and React DOM into index.js, put at the beginning of the file
            import React from "react";
            import ReactDOM from "react-dom";
        Create a test component 
            ReactDOM.render(
                <h1>Hello, world!</h1>,
                document.getElementById('root')
            );
        Install babel preset for react 
            npm install @babel/preset-react --save-dev
        CONFING .babelrc
            - "presets": ["@babel/preset-env"]
            + "presets": ["@babel/preset-env", "@babel/preset-react"]
        CONFIG webpack.config.js
            Add the jsx extension to resolve 
                +   resolve: {
                +     extensions: ['.js', '.jsx'],
                +   },
            Modify the entry point
                -     app: ['./index.js'],
                +     app: ['./index.jsx'],
            Modify babel loader 
                -     test: /\.js$/,
                +     test: /\.jsx?$/,

15 .- SERVER CONFIGURATION (optional)
        If you want to change the output port or open the browser automatically you can add more settings 
            CONFIG webpack.config.js 
                devServer: {
                    port: 8081,
                    open: true,
                },
            
16 .- npm run build
      npm start
      Lets start working with react!! 








